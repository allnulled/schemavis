/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Language: peg$parseLanguage },
        peg$startRuleFunction  = peg$parseLanguage,

        peg$c0 = function(sentences) {return Utils.toVisParameters(sentences)},
        peg$c1 = function(sentence_1, sentence_n) {return [].concat(sentence_1).concat(sentence_n.map((i) => i[1]))},
        peg$c2 = function(sentence) {return sentence},
        peg$c3 = function(title, contents) {return {title, contents, options}},
        peg$c4 = "# Schema - ",
        peg$c5 = peg$literalExpectation("# Schema - ", false),
        peg$c6 = /^[^\n]/,
        peg$c7 = peg$classExpectation(["\n"], true, false),
        peg$c8 = function() {return text().replace(/^# Schema - /g, "")},
        peg$c9 = "//",
        peg$c10 = peg$literalExpectation("//", false),
        peg$c11 = "/",
        peg$c12 = peg$literalExpectation("/", false),
        peg$c13 = function(nodes) {return nodes},
        peg$c14 = function(node) {return node;},
        peg$c15 = "*",
        peg$c16 = peg$literalExpectation("*", false),
        peg$c17 = function(level, new_instance, node) {
        	return nodesMemoManager.getOrSet(node.join(""), level ? level : 1, !!new_instance);
        },
        peg$c18 = "-",
        peg$c19 = peg$literalExpectation("-", false),
        peg$c20 = function(level, edge) {
        	return {
        		type:"edge", 
        		level: level, 
        		label: edge.join("")
        	};
        },
        peg$c21 = " ",
        peg$c22 = peg$literalExpectation(" ", false),
        peg$c23 = function() {return text().length+1},
        peg$c24 = /^[\t\r ]/,
        peg$c25 = peg$classExpectation(["\t", "\r", " "], false, false),
        peg$c26 = "\n",
        peg$c27 = peg$literalExpectation("\n", false),
        peg$c28 = /^[\n\r\t ]/,
        peg$c29 = peg$classExpectation(["\n", "\r", "\t", " "], false, false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseLanguage() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseSentences();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSentences() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSentence();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseNew_line();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSentence();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseNew_line();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSentence();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseseparation();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseseparation();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSentence() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseSchema_sentence();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSchema_sentence() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseNew_line();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSchema_sentence_title();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSchema_sentence_contents();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSchema_closer();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSchema_sentence_title() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c6.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSchema_closer() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNew_line();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c9) {
          s2 = peg$c9;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c11;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (input.charCodeAt(peg$currPos) === 47) {
                s4 = peg$c11;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c6.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c6.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSchema_sentence_contents() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSchema_sentence_node();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSchema_sentence_node();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSchema_sentence_node() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseSchema_sentence_node_edge();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSchema_sentence_node_point();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSchema_sentence_node_point() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseNew_line();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTabulation();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s3 = peg$c15;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c9) {
              s5 = peg$c9;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c6.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c6.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c17(s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSchema_sentence_node_edge() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNew_line();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTabulation();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c6.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c6.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTabulation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c21;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c21;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c23();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNew_line() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = [];
      if (peg$c24.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c24.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c26;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = [];
          if (peg$c24.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c24.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s3 = peg$c26;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseseparation() {
      var s0;

      if (peg$c28.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }

      return s0;
    }


    	/**
    	 * # This New Programming Language
    	 * 
    	 * ## 1. Installation
    	 * 
    	 * ~$ `npm install -s this-new-programming-language`
    	 * 
    	 * ## 2. Usage
    	 * 
    	 * ...
    	 * 
    	 * ## 3. Conclusion
    	 * 
    	 * ...
    	 * 
    	 * 
    	 * 
    	 * 
    	 */

    	class IdManager {
    		
    		constructor() {
    			this.id = 0;
    		}

    		getId() {
    			return ++this.id;
    		}

    	}

    	var idManager = new IdManager();

    	class NodesMemoManager {
    		constructor(idManager) {
    			this.keys = {};
    			this.idManager = idManager;
    		}
    		getOrSet(name, level, isNew=false) {
    			console.log(`Looking for ${name}`);
    			console.log(`Looking for ${name in this.keys}`);
    			if(!isNew && name in this.keys) {
    				console.log(`Found:`, this.keys[name]);
    				var out = this.keys[name];
    				return Object.assign({}, out, {type:"reference"}, {virtualLevel: level});
    			} else {
    				this.keys[name] = {
    					id: this.idManager.getId(),
    					shape: "box", 
    					type:"node", 
    					level, 
    					label: name
    				}; 
    				console.log(`Created to:`, this.keys[name]);
    				return this.keys[name];
    			}
    		}
    	}

    	var nodesMemoManager = new NodesMemoManager(idManager);

    	class Utils {

    		static decomposeFromArrays(item, acc=[]) {
    			if(item instanceof Array) {
    				for(var a=0; a<item.length; a++) {
    					acc = Utils.decomposeFromArrays(item[a], acc);
    				}
    			} else typeof item !== "undefined" ? acc.push(item) : undefined;
    			return acc;
    		}

    		static correctLevelOffset(item, levelReference) {
    			console.log("ITTT", item, levelReference);
    			for(var a=levelReference.length-1; a>=0; a--) {
    				var levelInfo = levelReference[a];
    				var {level, offset} = levelInfo;
    				console.log("ILO", item, level, offset);
    				if(level > item.level || level === 0) {
    					return Object.assign({}, item, {level:level + item.level});
    				} else {
    					levelReference.pop();
    				}
    			}
    		}

    		static extendOptions(options) {
    			return Object.assign({}, {
    				physics: false,
    				layout: {
    					hierarchical: {
    						enabled: true,
    						nodeSpacing: 180,
    						levelSeparation: 220,
    						direction: "LR",
    						sortMethod: "directed"
    					}
    				},
    			}, options);
    		}

    		static getPreviousPointFromEdge(arr, indexEdge) {
    			var original = arr[indexEdge];
    			var origin = undefined;
    			var items = arr.slice(0, indexEdge).reverse();
    			console.log("original, origin, items", original, origin, items);
    			ItemsIteration:
    			for(var a=0; a < items.length; a++) {
    				var item = items[a];
    				console.log("Previous item from edge", item);
    				if(item.level < (original.level -1)) {
    					console.log("Iteration broken at", item);
    					break ItemsIteration;
    				} else if(item.level === (original.level-1)) {
    					origin = item;
    					break ItemsIteration;
    				}
    			}
    			return origin;
    		}
    		static getNextPointsFromEdge(arr, indexEdge) {
    			var original = arr[indexEdge];
    			var others = [];
    			var items = arr.slice(indexEdge);
    			ItemsIteration:
    			for(var a=1; a < items.length; a++) {
    				var item = items[a];
    				// console.log("Next item from edge", item);
    				if(item.level <= original.level) {
    					// console.log("Iteration broken at", item);
    					break ItemsIteration;
    				} else if((item.level === original.level) || (item.level === (original.level+1))) {
    					others.push(item);
    				}
    			}
    			return others;
    		}
    		static toVisParameters(data) {
    			var nodes = [];
    			var edges = [];
    			var options = {};
    			var levelReference = [
    				{level:0,offset:0},
    			];
    			// //console.log("Alldata",data);
    			for(var n=0; n<data.length; n++) {
    				// //console.log("Row:", data[n]);
    				var dataRow  = data[n].contents;
    				for(var a=0; a<dataRow.length; a++) {
    					var item = dataRow[a];
    					console.log("Item:", item);
    					switch(item.type) {
    						case "edge":
    						var origin = Utils.getPreviousPointFromEdge(dataRow, a);
    						var others = Utils.getNextPointsFromEdge(dataRow, a);
    						console.log("origin and others", a, dataRow, origin, others);
    						for(var b=0; b<others.length; b++) {
    							edges.push({
    								from: origin.id,
    								to: others[b].id,
    								label: item.label,
    								arrows: "to",
    								font: {
    									align: "middle"
    								}
    							});
    						}
    						break;
    						case "node":
    						nodes.push(/*Utils.correctLevelOffset(item, levelReference)*/item);
    						var origin = Utils.getPreviousPointFromEdge(dataRow, a);
    						if(origin) {
    							edges.push({
    								from: origin.id,
    								to: item.id,
    								arrows: "to",
    								font: {
    									align: "middle"
    								}
    							});
    						}
    						break;
    						case "reference":
    							console.log("Reference found", item);
    							/*
    							levelReference.push({
    								level: item.virtualLevel,
    								offset: item.level,
    							});
    							//*/
    						break;
    					}
    				}
    			}
    			var output = Object.assign({}, {nodes, edges, options: Utils.extendOptions(options), data: data});
    			console.log(output);
    			return output;
    		}
    	}


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  root.MyNewLanguage = {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
	root.LanguageCreatorData = {};
	root.LanguageCreatorData.LanguageParser = {
		SyntaxError: peg$SyntaxError,
		parse:       peg$parse	
	};
})(typeof window !== "undefined" ? window : global);
